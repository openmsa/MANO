# A.2-sunshinedbcomplex.vnfd.tosca.yaml
tosca_definitions_version: tosca_simple_yaml_1_3

description: Relational database, complex 
imports:
  - etsi_nfv_sol001_vnfd_types.yaml  # all of TOSCA VNFD types as defined in ETSI GSÂ NFV-SOL 001
  - sunshineVNF.yaml # contains the VNF node type definition

node_types:
  MyCompany.nodes.nfv.Vdu.Aux:
    derived_from: tosca.nodes.nfv.Vdu.Compute
    properties:
      configurable_properties:
        type: MyCompany.datatypes.nfv.AuxVnfcConfigurableProperties
        required: false

data_types:
  MyCompany.datatypes.nfv.AuxVnfcConfigurableProperties:
    derived_from: tosca.datatypes.nfv.VnfcConfigurableProperties
    properties:
      additional_vnfc_configurable_properties:
        type: MyCompany.datatypes.nfv.AuxVnfcAdditionalConfigurableProperties
        required: true

  MyCompany.datatypes.nfv.AuxVnfcAdditionalConfigurableProperties:
    derived_from: tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties
    properties:
      name_prefix_in_vim:
        type: string
        required: true
        default: "MyCustomer"
      dns_server:
        type: string
        required: true
        default: "90.200.250.57"

topology_template:
  substitution_mappings:
    node_type: MyCompany.SunshineDB.1_0.1_0 
    substitution_filter:
      properties:   
        - flavour_id: { equal: complex }
    requirements:
      virtual_link_backend: [ dbBackendCp, virtual_link ]  # IPv4 for SQL
      virtual_link_service: [ serviceNodeCp, virtual_link ]  # IPv4 for SSH

  node_templates:
    SunshineDB:
      type: MyCompany.SunshineDB.1_0.1_0
      properties:
        flavour_description: A complex flavour
      interfaces:
        Vnflcm: 
          operations:
            instantiate:
              implementation: instantiate.workbook.mistral.yaml
            terminate:
              implementation: terminate.workbook.mistral.yaml
            heal:
              implementation: heal.workbook.mistral.yaml
            scale: scale.workbook.mistral.yaml
            scale_start:
              description: desc
              implementation:
                primary: Hello
                timeout: 5000
                operation_host: host
                dependencies:
                  - a
                  - b
                  - c

    dbBackend:
      type: MyCompany.nodes.nfv.Vdu.Aux
      properties:
        name: dbBackend
        description: dbBackend compute node
        nfvi_constraints: 
          key_1: value_1
          key_2: value_2
        vdu_profile:
          min_number_of_instances: 3
          max_number_of_instances: 4
      capabilities:
        virtual_compute:
          properties:
            virtual_memory:
              virtual_mem_size: 8192 MiB
            virtual_cpu:
              cpu_architecture: x86
              num_virtual_cpu: 2
              virtual_cpu_clock: 1800 MHz
      requirements:
        - virtual_storage: mariaDbStorage

    serviceNode:
      type: tosca.nodes.nfv.Vdu.Compute
      properties:
        name: serviceNode
        description: brief description about serviceNode
        nfvi_constraints: 
          key_3: value_3
          key_4: value_4
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
      capabilities:
        virtual_compute:
          properties:
            virtual_memory:
              virtual_mem_size: 8192 MiB
            virtual_cpu:
              cpu_architecture: x86
              num_virtual_cpu: 2
              virtual_cpu_clock: 1800 MHz
      requirements:
        - virtual_storage: mariaDbStorage
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: maria.db.image.v1.0.qcow2
          properties:
            name: Software of Maria Db
            version: '1.0'
            checksum: 
              algorithm: sha-256
              hash: b9c3036539fd7a5f87a1bf38eb05fdde8b556a1a7e664dbeda90ed3cd74b4f9d
            container_format: bare
            disk_format: qcow2
            min_ram: 8192 MiB
            size: 2 GB
            operating_system: Linux
            supported_virtualisation_environments:
              - KVM

    mariaDbStorage:
      type: tosca.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: 100 GB
          rdma_enabled: true 

      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: maria.db.image.v1.0.qcow2
          properties:
            name: Software of Maria Db
            version: '1.0'
            checksum: 
              algorithm: sha-256
              hash: b9c3036539fd7a5f87a1bf38eb05fdde8b556a1a7e664dbeda90ed3cd74b4f9d
            container_format: bare
            disk_format: qcow2
            min_disk: 2 GB
            min_ram: 8192 MiB
            size: 2 GB
            operating_system: Linux
            supported_virtualisation_environments:
              - KVM

    dbBackendCp:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocols: [ ipv4 ]
        role: leaf
        description: External connection point to access the DB on IPv4
        protocol: [ associated_layer_protocol: ipv4 ]
        trunk_mode: false
      requirements:
        - virtual_binding: dbBackend
        #- virtual_link: # the target node is determined in the NSD

    dbBackendInternalCp:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocols: [ ipv4 ]
        role: leaf
        description: Internal connection point on an VL
        protocol: [ associated_layer_protocol: ipv4 ]
        trunk_mode: false
      requirements:
        - virtual_binding: dbBackend
        - virtual_link: internalVl

    serviceNodeCp:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocols: [ ipv4 ]
        role: leaf
        description: External connection point to access the DB on IPv4
        protocol: [ associated_layer_protocol: ipv4 ]
        trunk_mode: false
      requirements:
        - virtual_binding: serviceNode
        #- virtual_link: # the target node is determined in the NSD

    serviceNodeInternalCp:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocols: [ ipv4 ]
        role: leaf
        description: Internal connection point on VL
        protocol: [ associated_layer_protocol: ipv4 ]
        trunk_mode: false
      requirements:
        - virtual_binding: serviceNode
        - virtual_link: internalVl

    internalVl:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols: [ ipv4 ]
          flow_pattern: mesh
        description: Internal VL
        vl_profile:
          max_bitrate_requirements:
            root: 100000
            leaf: 20000
          min_bitrate_requirements:
            root: 10000
            leaf: 10000
    

